{"/home/travis/build/npmtest/node-npmtest-gittio/test.js":"/* istanbul instrument in package npmtest_gittio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gittio/lib.npmtest_gittio.js":"/* istanbul instrument in package npmtest_gittio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gittio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gittio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gittio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gittio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gittio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gittio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gittio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gittio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gittio.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gittio.__dirname +\n                    '/lib.npmtest_gittio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gittio/node_modules/gittio/lib/gittio.js":"var _ = require('underscore'),\n  alloy = require('./alloy'),\n  async = require('async'),\n  component = require('./component'),\n  config = require('./config'),\n  dist = require('./dist'),\n  exec = require('./exec'),\n  fs = require('fs-extended'),\n  glob = require('glob'),\n  logger = require('./logger'),\n  path = require('path'),\n  path = require('path'),\n  rimraf = require('rimraf'),\n  tiapp = require('./tiapp'),\n  utils = require('./utils');\n\nfunction uninstall(o) {\n\n  if (o.version === '*') {\n    delete o.version;\n  }\n\n  if (!_uninstallWidget(o)) {\n    _uninstallModule(o);\n  }\n}\n\nfunction _uninstallWidget(o) {\n  if (config.context === 'global' || !fs.existsSync(config.widgets_path)) {\n    return false;\n  }\n  var trgPath = path.join(config.widgets_path, o.id);\n  var files = fs.readdirSync(config.widgets_path);\n  var found = _.find(files, function(f) {\n    return f === o.id;\n  });\n  var installed = found && (o.version === undefined || require(path.join(trgPath, 'widget.json')).version === o.version);\n  var prefix = utils.prefix(o.id, o.version);\n  if (installed) {\n    rimraf.sync(trgPath);\n    alloy.dropDependency(o.id, o.version);\n\n    logger.info(prefix + ' uninstalled');\n\n    return true;\n  } else {\n    found = _.find(files, function(f) {\n      return f.toLowerCase() === o.id.toLowerCase();\n    });\n    if (found) {\n      logger.error(\"Did you mean \" + found + \"?\");\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction _uninstallModule(o) {\n  var trgPath = o.global ? config.global_modules_path : path.join(config.modules_path);\n  var platform = (o.platform ? o.platform.replace(\"ios\", \"iphone\") : undefined);\n  var uninstalled = false;\n\n  if (config.context === \"project\") {\n    uninstalled = tiapp.dropDependency(o.id, o.version, platform);\n  }\n\n  if (o.global || config.context !== \"project\") {\n    _.pairs(config.available_modules.global).forEach(function(kv) {\n      var platform = kv[0],\n        platform_modules = kv[1];\n      if (o.platform === undefined || o.platform == platform) {\n        _.pairs(platform_modules).forEach(function(kv) {\n          var id = kv[0],\n            id_modules = kv[1];\n          if (o.id === id) {\n            _.pairs(id_modules).forEach(function(kv) {\n              var version = kv[0],\n                module = kv[1];\n              if (o.version === undefined || o.version === version) {\n                var modulePath = path.join(module.modulePath);\n                if (fs.existsSync(modulePath)) {\n                  rimraf.sync(path.join(module.modulePath));\n                  uninstalled = true;\n                }\n              }\n            });\n          }\n        });\n      }\n    });\n  } else {\n\n    if (!fs.existsSync(trgPath)) {\n      return;\n    }\n\n    var platformDirs = fs.readdirSync(trgPath).filter(function(file) {\n      return fs.statSync(path.join(trgPath, file)).isDirectory();\n    });\n\n    _.each(platformDirs, function forEach(platformDir) {\n\n      if (platform && platform !== platformDir) {\n        return;\n      }\n\n      var delPath = path.join(trgPath, platformDir, o.id);\n\n      if (o.version) {\n        delPath = path.join(delPath, o.version);\n      }\n\n      if (fs.existsSync(delPath)) {\n        rimraf.sync(delPath);\n\n        uninstalled = true;\n\n        logger.info(utils.prefix(o.id, o.version, platformDir) + ' removed from project modules');\n      }\n\n    });\n  }\n\n  var prefix = utils.prefix(o.id, o.version, platform);\n\n  if (!uninstalled) {\n    logger.warn(prefix + ' not found');\n  }\n}\n\nfunction install(o) {\n\n  if (o.version === '*') {\n    delete o.version;\n  }\n\n  if (o.url) {\n    return _installUrl(o.url, o);\n\n  } else if (o.file) {\n    return _installFile(o.file, o);\n\n  } else if (o.id) {\n    return _installSingle(o);\n\n  } else {\n    if (config.context === \"global\") {\n      if (o.update && o.type !== \"widget\") {\n        return _installAllModules(o);\n      } else {\n        logger.error(\"This command must be executed from a project directory\");\n        return;\n      }\n    }\n    if (o.type === 'widget') {\n      return _installAllWidgets(o);\n    } else if (o.type === 'module') {\n      return _installAllModules(o);\n    } else {\n      return _installAll(o);\n    }\n  }\n}\n\nfunction _addDependency(cmp, dst, o) {\n  if (cmp.type === 'module' && config.context === 'project') {\n    tiapp.addDependency(cmp.id, o.version ? dst.version : null, dst.platforms);\n  } else if (cmp.type === 'widget') {\n    alloy.addDependency(cmp.id, o.version ? dst.version : null);\n  }\n}\n\nfunction findDown(dir, file) {\n\n  if (fs.existsSync(path.join(dir, file))) {\n    return file;\n  }\n\n  var files = fs.listAllSync(dir, {\n    recursive: true,\n    filter: function(itemPath, stat) {\n      return (stat.isFile() && path.basename(itemPath) === file);\n    }\n  });\n\n  if (files.length === 1) {\n    return files[0];\n  }\n\n  return null;\n}\n\nfunction _installDir(dir, o) {\n\n  var cmp = {};\n  var dst = {};\n\n  var widgetJson_path = findDown(dir, 'widget.json');\n\n  if (widgetJson_path) {\n    var widgetJson = require(path.join(dir, widgetJson_path));\n\n    cmp.id = widgetJson.id;\n    cmp.type = 'widget';\n\n    dst.version = widgetJson.version;\n    dst.srcPath = path.dirname(widgetJson_path);\n    dst.trgPath = path.join(config.widgets_path, cmp.id);\n\n  } else {\n\n    var manifest_path = findDown(dir, 'manifest');\n\n    if (!manifest_path) {\n      logger.error('Cannot find a module manifest');\n      return;\n    }\n\n    var manifest = fs.readFileSync(path.join(dir, manifest_path)).toString();\n    var match;\n\n    if (match = manifest.match(/^version: ?([^\\n]+)$/m)) {\n      dst.version = match[1];\n    }\n\n    if (match = manifest.match(/^moduleid: ?([^\\n]+)$/m)) {\n      cmp.id = match[1];\n\n    } else {\n      logger.error('Cannot find module id in the manifest');\n      return;\n    }\n\n    if (match = manifest.match(/^platform(?:s)?: ?([^\\n]+)$/m)) {\n      dst.platforms = match[1].split(',');\n\n    } else {\n      logger.error('Cannot find target platforms in the manifest');\n      return;\n    }\n\n    cmp.type = 'module';\n\n    dst.srcPath = 'modules';\n    dst.trgPath = o.global ? config.global_modules_path : config.modules_path;\n  }\n\n  var prefix = utils.prefix(cmp.id, dst.version, dst.platforms);\n\n  // copy from tmpPath\n  fs.copyDir(path.join(dir, dst.srcPath), dst.trgPath, function(err) {\n\n    if (err) {\n      logger.error(err);\n      return;\n    }\n\n    // add dependency\n    _addDependency(cmp, dst, o);\n\n    // remove tmpPath\n    rimraf.sync(dir);\n\n    logger.info(prefix + ' installed');\n  });\n}\n\nfunction _installUrl(url, o) {\n\n  dist.download(url, function(err, dir) {\n\n    if (err) {\n      logger.error(err);\n      return;\n    }\n\n    _installDir(dir, o);\n\n  });\n}\n\nfunction _installFile(file, o) {\n\n  dist.extract(file, function(err, dir) {\n\n    if (err) {\n      logger.error(err);\n      return;\n    }\n\n    _installDir(dir, o);\n\n  });\n}\n\nfunction _installSingle(o) {\n\n  component.lookup(o.id, function(err, cmp) {\n\n    if (err) {\n      logger.error(err);\n      return;\n    }\n\n    if (cmp.type === 'widget' && !config.isAlloy) {\n      logger.error('Widgets must be installed within an Alloy project directory.');\n      return;\n    }\n\n    // filter all dists\n    var dists = component.filterDists(cmp, o);\n\n    // nothing to install\n    if (dists.length === 0) {\n      return;\n    }\n\n    // for all dists\n    _.each(dists, function(dst) {\n      var prefix = utils.prefix(cmp.id, dst.version, dst.platforms),\n        installed = dist.isInstalled(cmp, dst, o);\n\n      // already installed\n      if (installed && !o.force) {\n        logger.warn(prefix + ' already installed');\n\n        // add dependency\n        _addDependency(cmp, dst, o);\n\n      } else {\n\n        // download\n        logger.info(prefix + ' downloading...');\n\n        dist.download(dst.dist, function(err, tmpPath) {\n\n          if (err) {\n            logger.error(err);\n            return;\n          }\n\n          logger.info(prefix + ' installing...');\n\n          // copy from tmpPath\n          fs.copyDirSync(path.join(tmpPath, dst.srcPath), dst.trgPath);\n\n          if (err) {\n            logger.error(err);\n            return;\n          }\n\n          // add dependency\n          _addDependency(cmp, dst, o);\n\n          // search for module/widget dependencies\n          var dependencies = {};\n\n          if (cmp.type === 'widget') {\n\n            // recursive widget dependencies\n            var widget = fs.readJSONSync(path.join(dst.trgPath, 'widget.json'));\n\n            // include our self-declared 'modules' dependencies\n            dependencies = _.extend({}, widget.dependencies || {}, widget.modules || {});\n\n          } else if (cmp.type === 'module') {\n\n            // Fixes #105\n            var modulePath = path.join(dst.trgPath, dst.platforms[0], cmp.id, dst.version);\n\n            // recursive module dependencies (reading from the temp)\n            var pkgs = glob.sync('package.json', {\n              cwd: modulePath\n            }).map(function(pkgPath) {\n              return fs.readJSONSync(path.join(modulePath, pkgPath));\n            });\n\n            // merge all package.json#_nativeDependencies\n            pkgs.forEach(function(pkg) {\n              _.defaults(dependencies, pkg._nativeDependencies || pkg.nativeDependencies || {});\n            });\n          }\n\n          var tasks;\n          if (dependencies && (_.size(dependencies) > 0)) {\n            tasks = _.pairs(dependencies).map(function(kv) {\n              var id = kv[0],\n                version = kv[1];\n\n              return function() {\n                install(_.defaults({\n                  id: id,\n                  version: version\n                }, o));\n              };\n\n            });\n          }\n\n          // install dependencies\n          if (tasks && (tasks.length > 0)) {\n            async.parallel(tasks);\n          }\n\n          // remove tmpPath\n          rimraf.sync(tmpPath);\n\n          logger.info(prefix + ' installed');\n        });\n      }\n    });\n  }, {\n    action: o.update ? 'update' : 'install'\n  });\n}\n\nfunction _installAll(o) {\n  async.parallel([\n    _.bind(_installAllWidgets, undefined, o),\n    _.bind(_installAllModules, undefined, o)\n  ]);\n}\n\nfunction _installAllWidgets(o) {\n\n  if (config.isAlloy) {\n    var data = config.alloy_config;\n\n    if (data.dependencies && _.size(data.dependencies) > 0) {\n      var tasks = [];\n\n      _.each(data.dependencies, function(version, widget) {\n        tasks.push(function() {\n          install(_.extend({\n            id: widget,\n            version: o.update ? undefined : version\n          }, o));\n        });\n      });\n\n      async.parallel(tasks);\n\n    } else {\n      logger.warn('no widgets found to ' + (o.update ? 'update' : 'install'));\n    }\n  }\n}\n\nfunction _installAllModules(o) {\n  var tasks;\n  if (config.context === \"project\") {\n    tasks = config.current_modules.map(function(m) {\n      return function() {\n        install(_.defaults({\n          id: m.name,\n          version: o.update ? undefined : m.version,\n          platform: m.platform.replace(\"iphone\", \"ios\")\n        }, o));\n      };\n    });\n  } else {\n    tasks = [];\n    _.pairs(config.available_modules.global).forEach(function(kv) {\n      var platform = kv[0],\n        platform_modules = kv[1];\n      _.pairs(platform_modules).forEach(function(kv) {\n        var id = kv[0],\n          id_modules = kv[1];\n        tasks.push(function() {\n          install(_.defaults({\n            id: id,\n            platform: platform.replace(\"iphone\", \"ios\")\n          }, o));\n        });\n      });\n    });\n  }\n  if (tasks.length > 0) {\n    async.parallel(tasks);\n  } else {\n    logger.warn('no modules found to ' + (o.update ? 'update' : 'install'));\n  }\n}\n\nfunction info(id, options) {\n\n  config.init({\n    global: true\n  }, function() {\n    component.lookup(id, function(err, info) {\n      if (err) {\n        if (options.output === \"json\") {\n          console.log(JSON.stringify({\n            error: err\n          }));\n        } else {\n          logger.error(err);\n        }\n        return;\n      }\n      if (options.output === \"json\") {\n        console.log(JSON.stringify(info, null, '  '));\n      } else {\n        utils.prettyJSON(info);\n        console.log('');\n      }\n    }, {\n      silent: options.output === \"json\",\n      action: 'info'\n    });\n  });\n}\n\nfunction demo(o) {\n\n  if (config.context === 'project') {\n    logger.error('will not create a project within a project: ' + project_path);\n    return;\n  }\n\n  component.lookup(o.id, function(err, cmp) {\n\n    if (err) {\n      logger.error(err);\n      return;\n    }\n\n    if (cmp.type !== 'module') {\n      logger.error('demo only works with modules.');\n      return;\n    }\n\n    var project_name = utils.camelCase(cmp.title);\n    var project_path = path.join(process.cwd(), project_name);\n\n    if (fs.existsSync(project_path)) {\n      logger.error('cannot create already existing: ' + project_path);\n      return;\n    }\n\n    // filter all dists\n    var dists = component.filterDists(cmp, o);\n\n    // nothing to install\n    if (dists.length === 0) {\n      var prefix = utils.prefix(o.id, o.version);\n      return;\n    }\n\n    console.log('');\n    console.log('--- CREATING PROJECT ---');\n    console.log('');\n\n    // create project\n    exec('ti', ['create', '-t', 'app', '-u', 'http://gitt.io', '-p', cmp.platforms.join(','), '-n', project_name, '--id', cmp.id, '-d', process.cwd()], {\n      stdio: 'inherit'\n    }, function(err, stdout) {\n\n      if (err) {\n        logger.error('Failed to create project: ' + err.stack);\n\n        if (err.message.indexOf('spawn ti ENOENT') !== -1) {\n          logger.error('This command requires the global Titanium CLI: [sudo] npm i -g titanium');\n        }\n\n        process.exit(1);\n      }\n\n      console.log('--- INSTALLING MODULE ---');\n      console.log('');\n\n      // install module\n      exec('gittio', ['install', cmp.id + (o.version ? '@' + o.version : '') + (o.platform ? ':' + o.platform : '')], {\n        cwd: project_path,\n        stdio: 'inherit'\n      }, function(err, stdout) {\n\n        if (err) {\n          logger.error('Failed to install module: ' + err.stack);\n          process.exit(1);\n        }\n\n        console.log('');\n        console.log('--- PREPARING EXAMPLES ---');\n        console.log('');\n\n        var build = null;\n\n        // if the user defined the platform(s) we only want those\n        if (undefined !== o.platform) {\n          cmp.platforms = _.intersection(cmp.platforms, o.platform.split(','));\n\n          if (cmp.platforms.length === 0) {\n            console.error('The module has none of the requested platforms.');\n            return;\n          }\n        }\n\n        // for each platform\n        _.some(cmp.platforms, function(platform) {\n\n          if (platform === 'ios') {\n            platform = 'iphone';\n          }\n\n          var module_path = path.join(project_path, 'modules', platform, cmp.id);\n          var version = fs.readdirSync(module_path)[0];\n          var example_path = path.join(module_path, version, 'example');\n\n          // no example\n          if (!fs.existsSync(path.join(example_path, 'app.js'))) {\n            logger.warn('No example for ' + platform);\n            return;\n          }\n\n          logger.info('Copied example for ' + platform);\n\n          // copy example\n          fs.copySync(example_path, path.join(project_path, 'Resources', platform));\n\n          build = build || platform;\n\n          // break the loop, we only need one example\n          return true;\n        });\n\n        // no examples\n        if (!build) {\n          logger.error('No examples found.');\n          return;\n        }\n\n        console.log('');\n        console.log('--- BUILDING PROJECT ---');\n        console.log('');\n\n        // build first platform\n        exec('ti', ['build', '-p', build], {\n          cwd: project_path,\n          stdio: 'inherit'\n        }, function(err, stdout) {\n\n          if (err) {\n            logger.error('Failed to build project: ' + err.stack);\n            process.exit(1);\n          }\n\n        });\n      });\n    });\n  }, {\n    action: 'demo'\n  });\n}\n\nexports.install = install;\nexports.uninstall = uninstall;\nexports.info = info;\nexports.demo = demo;\n","/home/travis/build/npmtest/node-npmtest-gittio/node_modules/gittio/lib/alloy.js":"var fs = require(\"fs\"),\n  logger = require(\"./logger\"),\n  config = require(\"./config\"),\n  utils = require(\"./utils\");\n\nexports.addDependency = function(id, version) {\n  var deps = config.alloy_config.dependencies;\n\n  // widget is in list with same version (if given)\n  if (deps[id] && (!version || deps[id] === version)) {\n    return;\n  }\n\n  logger.info(utils.prefix(id, version) + ' ' + (deps[id] ? 'updated in' : 'added to') + ' config.json');\n  config.alloy_config.dependencies[id] = version || '*';\n  fs.writeFileSync(config.alloy_config_file, JSON.stringify(config.alloy_config, null, \"  \"));\n};\n\nexports.dropDependency = function(id, version) {\n  var deps = config.alloy_config.dependencies;\n\n  // widget is not in list or with different version (if given)\n  if (!deps[id] || (version && version !== deps[id])) {\n    return;\n  }\n\n  logger.info(utils.prefix(id, deps[id]) + ' removed from config.json');\n  delete config.alloy_config.dependencies[id];\n  fs.writeFileSync(config.alloy_config_file, JSON.stringify(config.alloy_config, null, \"  \"));\n};\n","/home/travis/build/npmtest/node-npmtest-gittio/node_modules/gittio/lib/logger.js":"var chalk = require('chalk'),\n  _ = require('underscore');\n\nvar levels = {\n  info: chalk.white,\n  trace: chalk.grey,\n  debug: chalk.blue,\n  error: chalk.red,\n  warn: chalk.yellow\n};\n\n_.each(levels, function(color, level) {\n  exports[level] = function(msg) {\n    console[level](color('[' + level.toUpperCase() + ']') + (level.length !== 5 ? ' ' : '') + ' ' + msg);\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-gittio/node_modules/gittio/lib/config.js":"var fs = require('fs'),\n  path = require('path');\n\nvar timodules = require('timodules'),\n  _ = require('underscore'),\n  chalk = require('chalk'),\n  appc = require('appc-compat');\n\nvar logger = require('./logger');\n\nvar user_path = path.join(process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'], '.gittio.json');\n\n_.extend(exports, readDefault());\n\nfunction readUser() {\n  return fs.existsSync(user_path) ? require(user_path) : {};\n}\n\nfunction readDefault() {\n  return require('../config.json');\n}\n\nfunction read() {\n  return _.extend({}, readDefault(), readUser());\n}\n\nfunction writeUser(cfg) {\n  fs.writeFileSync(user_path, JSON.stringify(cfg));\n}\n\nexports.set = function(key, value) {\n  var defaultConfig = readDefault();\n\n  if (defaultConfig[key] === undefined) {\n    logger.error('Unknown configuration key: ' + key);\n    return;\n  }\n\n  var userConfig = readUser();\n\n  if (typeof value !== 'string') {\n    delete userConfig[key];\n\n  } else {\n\n    if (value === 'true') {\n      value = true;\n    } else if (value === 'false') {\n      value = false;\n    }\n\n    if (typeof value !== typeof defaultConfig[key]) {\n      logger.error('Invalid configuration value type: ' + (typeof value) + ' (should be: ' + (typeof defaultConfig[key]) + ')');\n      return;\n    }\n\n    userConfig[key] = value;\n  }\n\n  writeUser(userConfig);\n};\n\nexports.list = function() {\n  var cfg = read();\n  var userConfig = readUser();\n\n  console.log();\n\n  _.each(cfg, function(val, key) {\n\n    var color = (userConfig[key] !== undefined) ? 'green' : 'blue';\n\n    console.log('  ' + chalk[color].bold(key));\n    console.log('    ' + val);\n\n  });\n};\n\nexports.init = function(params, callback) {\n\n  // check the rc for the keys below and use them if they were not already defined\n  var allowedRcKeys = ['alloyBase', 'platform'];\n  var rcParams = require('rc')('gittio', {});\n  allowedRcKeys.forEach(function(key) {\n    if (params[key] === null && rcParams[key] !== null) {\n      params[key] = rcParams[key];\n    }\n  });\n\n  // export all the global config\n  _.extend(exports, read());\n\n  timodules.list(process.cwd(), function(err, res) {\n\n    /*\n     res = {\n       path: String, // project root path\n       current: [{name, version, platform}] //current modules from tiapp.xml\n       modules: [{name, version, platform, scope}] // list of installed modules\n       tiapp: tiapp xml as an object\n     }\n    */\n    if (err) {\n\n      if (_.isObject(err)) {\n        err = err.toString();\n      }\n\n      if (err === 'Not Found') {\n\n        if (!params.global) {\n          logger.error(\"gittio must be run within a titanium project path if not using the --global flag\");\n          process.exit(1);\n        } else {\n          exports.context = 'global';\n        }\n\n      } else {\n\n        if (err === true) {\n          logger.error('Error running timodules.');\n\n        } else {\n          logger.error('Error running timodules: ' + err);\n\n          if (/spawn (ti|appc) ENOENT/.test('spawn ti ENOENT')) {\n            logger.error('You need either the Titanim or Appcelerator CLI to be installed:\\n        [sudo] npm i -g titanium appcelerator');\n          } else if (err.indexOf('[Error: Module version mismatch.]') !== -1) {\n            logger.error('You need to rebuild the AppC/Titanium CLI after switching major NodeJS version:\\n        [sudo] npm i -g titanium && appc use latest --force');\n          } else if (err.indexOf('(node) sys is deprecated. Use util instead.') !== -1) {\n            logger.error('You have a Titanium CLI hook that messes with the output. Please disable.');\n          }\n        }\n\n        process.exit(1);\n      }\n\n    } else {\n      exports.context = 'project';\n    }\n\n    // build paths\n    if (exports.context === 'project') {\n      var base = res.path;\n      var alloy = path.join(base, params.alloyBase || 'app');\n      var alloy_config_file = path.join(alloy, 'config.json');\n      var deploymentTargets = [];\n\n      res.tiapp.obj['ti:app']['deployment-targets'][0].target.forEach(function(t) {\n        if (t._ === 'true') {\n          var platform = t.$.device;\n          if (platform === 'ipad' || platform === 'iphone') {\n            if (deploymentTargets.indexOf('ios') !== -1) {\n              return;\n            }\n            platform = 'ios';\n          }\n          deploymentTargets.push(platform);\n        }\n      });\n\n      exports.base = base;\n      exports.modules_path = path.join(base, 'modules');\n      exports.widgets_path = path.join(alloy, 'widgets');\n      exports.isAlloy = fs.existsSync(alloy_config_file);\n      exports.targets = deploymentTargets;\n\n      // alloy config\n      if (exports.isAlloy) {\n        try {\n          exports.alloy_config_file = alloy_config_file;\n          exports.alloy_config = require(alloy_config_file);\n        } catch (e) {\n          logger.error(e);\n          process.exit(1);\n        }\n      }\n    }\n\n    exports.current_modules = res.current;\n    exports.available_modules = res.modules;\n    exports.tiapp = res.tiapp;\n\n    appc.ti(['sdk', 'list', '-o', 'json'], function(err, stdout, stderr) {\n\n      if (err) {\n        logger.error('Failed to get Titanium SDK config: ' + stderr);\n        process.exit(1);\n      }\n\n      exports.global_path = JSON.parse(stdout).defaultInstallLocation;\n      // modules setup\n      exports.global_modules_path = path.join(exports.global_path, \"modules\");\n\n      callback();\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gittio/node_modules/gittio/lib/utils.js":"var _ = require('underscore'),\n  chalk = require('chalk');\n\nfunction prettyJSON(val, key, depth) {\n\n  if (!depth) {\n    depth = 0;\n  }\n\n  var prefix = '';\n\n  if (_.isString(key)) {\n\n    if (depth) {\n      prefix += Array(depth).join(' ');\n    }\n\n    prefix += chalk.green(key.toString()) + ':';\n  }\n\n  if (_.isArray(val) && !_.isObject(_.first(val))) {\n    console.log(prefix + ' ' + val.join(', '));\n\n  } else if (_.isObject(val)) {\n    console.log(prefix);\n\n    if (!_.isArray(val)) {\n      depth += 2;\n    }\n\n    _.each(val, function(val, key) {\n      prettyJSON(val, key, depth);\n    });\n\n  } else {\n    console.log(prefix + ((val !== null && val !== undefined) ? ' ' + val : ''));\n  }\n}\n\nexports.prettyJSON = prettyJSON;\n\nexports.prefix = function(id, version, platforms) {\n  var prefix = id;\n\n  if (version && version !== '*') {\n    prefix += '@' + version;\n  }\n\n  if (platforms) {\n    prefix += ':';\n\n    if (typeof platforms === 'string') {\n      prefix += platforms;\n    } else {\n      prefix += platforms.join(',');\n    }\n  }\n\n  return chalk.blue(prefix);\n};\n\nexports.camelCase = function(str) {\n\n  return _.map(str.toLowerCase().split(/[^a-z0-9]/), function onEach(part) {\n    return part.substr(0,1).toUpperCase() + part.substr(1);\n  }).join('');\n\n};","/home/travis/build/npmtest/node-npmtest-gittio/node_modules/gittio/lib/component.js":"var os = require('os'),\n  path = require('path'),\n  logger = require('./logger'),\n  request = require('request'),\n  semver = require('semver'),\n  _ = require('underscore'),\n  utils = require('./utils'),\n  config = require('./config');\n\nexports.lookup = function(id, callback, options) {\n  options = options || {};\n  var prefix = utils.prefix(id);\n\n  if (!options.silent) {\n    logger.info(prefix + ' searching...');\n  }\n\n  var url = config['registry.url'] + id;\n\n  if (options.action) {\n    url += '?action=' + options.action;\n  }\n\n  request(url, function(error, response, body) {\n\n    if (!error && response.statusCode == 200) {\n      var cmp = JSON.parse(body);\n\n      if (cmp.error) {\n        callback(prefix + ' ' + cmp.error, null);\n        return;\n      }\n\n      // prepare for new types to be added\n      if (cmp.type !== 'widget' && cmp.type !== 'module') {\n        callback(prefix + ' unsupported type: ' + cmp.type);\n        return;\n      }\n\n      callback(null, cmp);\n\n    } else {\n      callback(prefix + ' error contacting registry: ' + url, null);\n    }\n  });\n};\n\nexports.filterDists = function(cmp, o) {\n  var platforms, dists = [];\n\n  // split platforms given\n  if (o.platform) {\n    platforms = o.platform.split(',');\n\n    // use deploymentTargets found in tiapp.xml\n  } else if (config.targets && _.size(config.targets) > 0) {\n    platforms = _.clone(config.targets);\n\n    // install all platforms available\n  } else {\n    platforms = _.clone(cmp.platforms);\n  }\n\n  var addedCommonJS = false;\n\n  // always include commonjs\n  if (!_.contains(platforms, 'commonjs')) {\n    addedCommonJS = true;\n    platforms.unshift('commonjs');\n  }\n\n  var platform;\n\n  // valid **specific** version, valid range, or something else (tags?)\n  var targetVersion = semver.valid(o.version) || semver.validRange(o.version) || o.version;\n\n  var versions = cmp.versions.map(function (v) {\n    v.semver = semver.valid(v.version) || semver.valid(v.version + '.0') || null;\n    return v;\n  }).sort(looseCompareDists);\n\n  var matches;\n\n  // while we have platforms to cover\n  while ((platform = platforms.shift()) !== undefined) {\n\n    // filter for versions that..\n    matches = versions.filter(function (v) {\n      // have a dist and matches platform\n      return v.dist && _.contains(v.platforms, platform);\n    });\n\n    var version;\n\n    if (!targetVersion) {\n      version = matches.pop();\n\n    } else {\n      while ((version = matches.pop()) !== undefined) {\n        if (version.semver !== null ? semver.satisfies(version.semver, targetVersion) : (version.version === targetVersion)) {\n          break;\n        }\n      }\n    }\n\n    var prefix = utils.prefix(cmp.id, o.version, platform);\n\n    // specific version not found\n    if (!version && o.version) {\n\n      // don't error on the commonjs we added\n      if (platform !== 'commonjs' || !addedCommonJS) {\n        logger.error(prefix + ' not found');\n      }\n\n      continue;\n    }\n\n    // no distributable version found\n    if (!version || !version.dist) {\n      logger.error(prefix + ' no distributable available');\n      continue;\n    }\n\n    // init paths\n    if (cmp.type == 'widget') {\n      version.trgPath = path.join(config.widgets_path, cmp.id);\n\n      if (version.path.length > 0) {\n        version.srcPath = path.join(cmp.repo + \"-\" + version.tree, version.path);\n      } else {\n        version.srcPath = path.join(cmp.repo + \"-\" + version.tree);\n      }\n\n    } else {\n      version.trgPath = o.global ? config.global_modules_path : config.modules_path;\n      version.srcPath = 'modules';\n    }\n\n    // remove the platforms this dist covers from our wanted-list\n    platforms = _.difference(platforms, version.platforms);\n\n    dists.push(version);\n\n    // for widgets we only do one\n    if (cmp.type === 'widget') {\n      break;\n    }\n  }\n\n  return dists;\n};\n\nfunction looseCompareDists(a, b) {\n\n  // 'master' is to be considered the 'last resort' version\n  if (a.version === 'master') {\n    return -1;\n  }\n  else if (b.version === 'master') {\n    return +1;\n  }\n\n  if (a.semver && b.semver) {\n    return semver.compareLoose(a.semver, b.semver);\n\n  } else {\n    return _cmpVersion(a.version, b.version);\n  }\n}\n\nfunction _cmpVersion(a, b) {\n    var i, cmp, len, re = /(\\.0)+[^\\.]*$/;\n    a = (a + '').replace(re, '').split('.');\n    b = (b + '').replace(re, '').split('.');\n    len = Math.min(a.length, b.length);\n    for( i = 0; i < len; i++ ) {\n        cmp = parseInt(a[i], 10) - parseInt(b[i], 10);\n        if( cmp !== 0 ) {\n            return cmp;\n        }\n    }\n    return a.length - b.length;\n}\n","/home/travis/build/npmtest/node-npmtest-gittio/node_modules/gittio/lib/dist.js":"var os = require('os'),\n  path = require('path'),\n  fs = require('fs-extended'),\n  request = require('request'),\n  AdmZip = require('adm-zip'),\n  _ = require('underscore'),\n  config = require('./config');\n\nexports.isInstalled = function (cmp, dst, o) {\n\n  if (cmp.type === 'widget') {\n\n    // installed if target exists and version matches\n    return fs.existsSync(path.join(dst.trgPath, 'widget.json')) && require(path.join(dst.trgPath, 'widget.json')).version >= dst.version;\n\n  } else {\n\n    return _.reduce(dst.platforms, function (memo, platform) {\n\n      // ios modules are stored under iphone\n      if (platform === 'ios') {\n        platform = 'iphone';\n      }\n\n      var available = config.available_modules,\n        scope = config.context;\n\n      // installed if module of specified version is found in context\n      if (memo && available[scope] && available[scope][platform] && available[scope][platform][cmp.id]) {\n\n        // iterate through versions, check if there's a later one installed\n        for (var version in available[scope][platform][cmp.id]) {\n          if (version >= dst.version) {\n            return true;\n          }\n        }\n      }\n    }, true);\n  }\n};\n\nexports.download = function (zipUrl, _cb) {\n  var tmpFile = path.join(generateTempDir() + '.zip');\n\n  request.get(zipUrl).pipe(fs.createWriteStream(tmpFile)).on('close', function () {\n\n    exports.extract(tmpFile, function (err, unzipDir) {\n\n      if (err) {\n        return _cb(err);\n      }\n\n      _cb(null, unzipDir);\n    });\n  });\n};\n\nfunction generateTempDir() {\n  return path.join(os.tmpDir(), Date.now().toString() + '-' + Math.random().toString().substring(2));\n}\n\nexports.extract = function (zipFile, _cb) {\n  var tmpDir = generateTempDir();\n\n  try {\n    var zip = new AdmZip(zipFile),\n      entries = zip.getEntries(),\n      pending = entries.length;\n\n    entries.forEach(function (entry) {\n\n      if (entry.isDirectory) {\n        return;\n      }\n\n      var file = path.join(tmpDir, entry.entryName);\n      fs.createFileSync(file, entry.getData());\n    });\n\n    _cb(null, tmpDir);\n\n  } catch (err) {\n    _cb(err);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-gittio/node_modules/gittio/lib/exec.js":"var child_process = require('child_process');\n\nmodule.exports = function exec(cmd, args, opts, callback) {\n\n  if (process.platform === 'win32') {\n    args = ['/c', cmd].concat(args);\n    cmd = process.env.comspec;\n  }\n\n  var childProcess = child_process.spawn(cmd, args, opts || {});\n\n  if (callback) {\n    var stdout = '';\n    var stderr = '';\n\n    // null if cmd does not exist\n    if (childProcess.stdout) {\n      childProcess.stdout.on('data', function(data) {\n        stdout += data.toString();\n      });\n    }\n\n    // null if cmd does not exist\n    if (childProcess.stderr) {\n      childProcess.stderr.on('data', function(data) {\n        stderr += data.toString();\n      });\n    }\n\n    childProcess.on('close', function(code) {\n      callback(null, stdout);\n    });\n\n    // fired when cmd does not exist, throwing exception when not listened to\n    childProcess.on('error', function(err) {\n      callback(err);\n    });\n  }\n\n  return childProcess;\n};\n","/home/travis/build/npmtest/node-npmtest-gittio/node_modules/gittio/lib/tiapp.js":"var fs = require(\"fs\"),\n  path = require(\"path\"),\n  xml2js = require('xml2js'),\n  _ = require(\"underscore\"),\n  logger = require(\"./logger\"),\n  utils = require('./utils'),\n  config = require(\"./config\");\n\nexports.addDependency = function(id, version, platforms) {\n\n  platforms.forEach(function(platform) {\n    var prefix = utils.prefix(id, version, platform);\n    var platform = platform.replace(\"ios\", \"iphone\");\n\n    var configured = _.find(config.current_modules, function(m) {\n      return m.name === id && m.platform === platform;\n    });\n\n    // add module\n    if (!configured) {\n      logger.info(prefix + ' adding to tiapp.xml');\n\n      var module = {\n        \"_\": id,\n        \"$\": {\n          platform: platform\n        }\n      };\n\n      // only add version if asked for specific\n      if (version) {\n        module.$.version = version;\n      }\n\n      // first module\n      if (!config.tiapp.obj['ti:app'].modules[0].module) {\n        config.tiapp.obj['ti:app'].modules = [{\n          module: [module]\n        }];\n      }\n\n      // additional module\n      else {\n        config.tiapp.obj['ti:app'].modules[0].module.push(module);\n      }\n    }\n\n    // update version, only if asked for specific or a version is set\n    else if (configured.version || (version && configured.version !== version)) {\n      logger.info(prefix + ' updating in tiapp.xml');\n\n      // find entry in tiapp.xml\n      config.tiapp.obj['ti:app'].modules[0].module.forEach(function(m) {\n        if (m[\"_\"] === id && m[\"$\"].platform === platform) {\n          m[\"$\"].version = version || configured.version;\n        }\n      });\n    }\n\n    // nothing to do\n    else {\n      return;\n    }\n\n    // write tiapp.xml\n    writeTiapp(config.tiapp.obj['ti:app'].modules[0]);\n  });\n};\n\nexports.dropDependency = function(id, version, platform) {\n  var write = false;\n\n  if (config.tiapp.obj['ti:app'].modules[0].module) {\n\n    config.tiapp.obj['ti:app'].modules[0].module = _.filter(config.tiapp.obj['ti:app'].modules[0].module, function(o) {\n      var attribs = o.$ || {};\n\n      if (o._ !== id || (version && attribs.version !== version) || (platform && attribs.platform !== platform)) {\n        return true;\n      } else {\n        logger.info(utils.prefix(id, attribs.version, attribs.platform) + ' removed from tiapp.xml');\n        write = true;\n        return false;\n      }\n    });\n  }\n\n  if (write) {\n    writeTiapp(config.tiapp.obj['ti:app'].modules[0]);\n  }\n\n  return write;\n};\n\nfunction writeTiapp(new_modules) {\n  var tiapp_file = path.join(config.tiapp.path, 'tiapp.xml');\n  var builder = new xml2js.Builder({\n    explicitRoot: false\n  });\n  fs.writeFileSync(tiapp_file,\n    fs.readFileSync(tiapp_file).toString()\n    .replace(\n      /<modules\\/>|<modules>[\\s\\S]*<\\/modules>/gm,\n      builder.buildObject({\n        modules: new_modules\n      })\n      .split(\"\\n\")\n      .splice(1)\n      .map(function(line, idx) {\n        return (idx > 0 ? \"  \" : \"\") + line;\n      }).join(\"\\n\")\n    )\n  );\n}"}